{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"telegram-webapp-auth","text":"<p>This Python package implements Telegram Mini Apps authentication algorithms.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install telegram-webapp-auth\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Small package - small documentation :)</p>"},{"location":"#license","title":"License","text":"<p>telegram-webapp-auth is licensed under the MIT License.</p>"},{"location":"license/","title":"License","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Dmitry Vasiliev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"guide/install/","title":"Installation","text":"<p>Get started with telegram-webapp-auth.</p>"},{"location":"guide/install/#setup","title":"Setup","text":""},{"location":"guide/install/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Make sure you have <code>`python</code> and <code>pip</code> properly installed in your system. <pre><code>python --version\npip --version\n</code></pre></p> </li> <li> <p>Create a new directory and move into it to follow along with this tutorial. <pre><code>mkdir learn-twa-auth &amp;&amp; cd learn-twa-auth\n</code></pre></p> </li> </ul>"},{"location":"guide/install/#installation","title":"Installation","text":"<ul> <li> <p>Create a virtual environment and activate it. <pre><code>python -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install <code>telegram-webapp-auth</code> using <code>pip</code>: <pre><code>pip install --upgrade telegram-webapp-auth\n</code></pre></p> </li> </ul>"},{"location":"guide/examples/django/","title":"Django","text":""},{"location":"guide/examples/django/#using-with-django","title":"Using with Django","text":"<p>Let's create authorization middleware.</p> <p>Firstly, create variables in your <code>settings.py</code>: <pre><code>from telegram_webapp_auth.auth import generate_secret_key\n\n# other settings\n\nTELEGRAM_BOT_TOKEN = env.str('TELEGRAM_BOT_TOKEN')\nTELEGRAM_SECRET_KEY = generate_secret_key(TELEGRAM_BOT_TOKEN)\n</code></pre></p> <p>Then implement middleware:</p> <pre><code>from django.conf import settings\nfrom django.contrib.auth.models import User\nfrom django.http import HttpRequest\nfrom django.http import HttpResponse\nfrom telegram_webapp_auth.auth import TelegramAuthenticator\nfrom telegram_webapp_auth.errors import InvalidInitDataError\n\n\nclass TWAAuthorizationMiddleware:\n    def __init__(self, get_response) -&gt; None:\n        self.get_response = get_response\n        self._telegram_authenticator = TelegramAuthenticator(settings.TELEGRAM_SECRET_KEY)\n\n    def __call__(self, request: HttpRequest) -&gt; HttpResponse:\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n        auth_cred = request.headers.get('Authorization')\n\n        try:\n            init_data = self._telegram_authenticator.validate(auth_cred)\n        except InvalidInitDataError:\n            # TODO: handle error\n            pass\n\n        if not init_data.user:\n            # TODO: handle error\n            pass\n\n        current_user = User.objects.filter(tg_id=init_data.user.id).first()\n        if not current_user:\n            # TODO: handle error\n            pass\n\n        request.user = current_user  # Associate current user with the request object\n\n        response = self.get_response(request)\n\n        # Code to be executed for each request/response after\n        # the view is called.\n\n        return response\n</code></pre> <p>To use <code>TWAAuthorizationMiddleware</code>, add it to your <code>MIDDLEWARE</code> setting in <code>settings.py</code>: <pre><code>MIDDLEWARE = [\n    # other middleware classes\n    'path.to.TWAAuthorizationMiddleware',\n]\n</code></pre></p>"},{"location":"guide/examples/fastapi/","title":"FastAPI","text":""},{"location":"guide/examples/fastapi/#using-with-fastapi","title":"Using with FastAPI","text":"<p>Let's create some useful stuff according to OAuth2 tutorial.</p> <p>File <code>auth.py</code>:</p> <pre><code>import http\n\nfrom fastapi import Depends\nfrom fastapi import HTTPException\nfrom fastapi.security.http import HTTPAuthorizationCredentials\nfrom fastapi.security.http import HTTPBase\n\nfrom telegram_webapp_auth.auth import TelegramAuthenticator\nfrom telegram_webapp_auth.auth import WebAppUser\nfrom telegram_webapp_auth.auth import generate_secret_key\nfrom telegram_webapp_auth.errors import InvalidInitDataError\n\nfrom .config import TelegramBotSettings  # Telegram Bot configuration\n\ntelegram_authentication_schema = HTTPBase()\n\n\ndef get_telegram_authenticator() -&gt; TelegramAuthenticator:\n    settings = TelegramBotSettings()\n    secret_key = generate_secret_key(settings.token)\n    return TelegramAuthenticator(secret_key)\n\n\ndef get_current_user(\n    auth_cred: HTTPAuthorizationCredentials = Depends(telegram_authentication_schema),\n    telegram_authenticator: TelegramAuthenticator = Depends(get_telegram_authenticator),\n) -&gt; WebAppUser:\n    try:\n        init_data = telegram_authenticator.validate(auth_cred.credentials)\n    except InvalidInitDataError:\n        raise HTTPException(\n            status_code=http.HTTPStatus.FORBIDDEN,\n            detail=\"Forbidden access.\",\n        )\n    except Exception:\n        raise HTTPException(\n            status_code=http.HTTPStatus.INTERNAL_SERVER_ERROR,\n            detail=\"Internal error.\",\n        )\n\n    if init_data.user is None:\n        raise HTTPException(\n            status_code=http.HTTPStatus.FORBIDDEN,\n            detail=\"Forbidden access.\",\n        )\n\n    return init_data.user\n</code></pre> <p>Finally, we can use it as usual.</p> <p>File <code>app.py</code>:</p> <pre><code>from fastapi import Depends\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\n\nfrom telegram_webapp_auth.auth import WebAppUser\n\nfrom .auth import get_current_user\n\napp = FastAPI()\n\n\nclass Message(BaseModel):\n    text: str\n\n\n@app.post(\"/message\")\nasync def send_message(\n    message: Message,\n    user: WebAppUser = Depends(get_current_user),\n):\n    \"\"\"\n    Some logic...\n    \"\"\"\n    ...\n</code></pre>"},{"location":"references/auth/","title":"Authorization","text":""},{"location":"references/auth/#module-auth","title":"module <code>auth</code>","text":""},{"location":"references/auth/#function-generate_secret_key","title":"function <code>generate_secret_key</code>","text":"<pre><code>generate_secret_key(token: str) \u2192 bytes\n</code></pre> <p>Generates a secret key from a Telegram token. </p> <p>Links:  https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app </p> <p>Args:</p> <ul> <li><code>token</code>:  Telegram Bot Token </li> </ul> <p>Returns:</p> <ul> <li><code>bytes</code>:  secret key </li> </ul> <p></p>"},{"location":"references/auth/#class-telegramuser","title":"class <code>TelegramUser</code>","text":"<p>Represents a Telegram user. </p> <p>Links:  https://core.telegram.org/bots/webapps#webappuser </p> <p></p>"},{"location":"references/auth/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    id: int,\n    first_name: str,\n    is_bot: Optional[bool] = None,\n    last_name: Optional[str] = None,\n    username: Optional[str] = None,\n    language_code: Optional[str] = None,\n    is_premium: Optional[bool] = None,\n    added_to_attachment_menu: Optional[bool] = None,\n    allows_write_to_pm: Optional[bool] = None,\n    photo_url: Optional[str] = None\n) \u2192 None\n</code></pre>"},{"location":"references/auth/#class-telegramauthenticator","title":"class <code>TelegramAuthenticator</code>","text":""},{"location":"references/auth/#method-__init___1","title":"method <code>__init__</code>","text":"<pre><code>__init__(secret: bytes)\n</code></pre>"},{"location":"references/auth/#method-verify_token","title":"method <code>verify_token</code>","text":"<pre><code>verify_token(token: str) \u2192 TelegramUser\n</code></pre> <p>Verifies the data using the method from documentation. Returns Telegram user if data is valid. </p> <p>Links:  https://core.telegram.org/bots/webapps#validating-data-received-via-the-mini-app </p> <p>Args:</p> <ul> <li><code>hash_</code>:  hash from init data </li> <li><code>token</code>:  init data from webapp </li> </ul> <p>Returns:</p> <ul> <li><code>TelegramUser</code>:  Telegram user if token is valid </li> </ul> <p>Raises:</p> <ul> <li><code>InvalidInitDataError</code>:  if the token is invalid </li> </ul> <p>This file was automatically generated via lazydocs.</p>"},{"location":"references/data/","title":"Data","text":""},{"location":"references/data/#module-data","title":"module <code>data</code>","text":""},{"location":"references/data/#global-variables","title":"Global Variables","text":"<ul> <li>dataclasses</li> <li>TEST_PUBLIC_KEY_STR</li> <li>PROD_PUBLIC_KEY_STR</li> <li>TEST_PUBLIC_KEY_BYTES</li> <li>PROD_PUBLIC_KEY_BYTES</li> </ul>"},{"location":"references/data/#class-webappuser","title":"class <code>WebAppUser</code>","text":"<p>Represents a Telegram user. </p> <p>Links:  https://core.telegram.org/bots/webapps#webappuser </p> <p></p>"},{"location":"references/data/#method-__init__","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    id: int,\n    first_name: str,\n    is_bot: Optional[bool] = None,\n    last_name: Optional[str] = None,\n    username: Optional[str] = None,\n    language_code: Optional[str] = None,\n    is_premium: Optional[bool] = None,\n    added_to_attachment_menu: Optional[bool] = None,\n    allows_write_to_pm: Optional[bool] = None,\n    photo_url: Optional[str] = None\n) \u2192 None\n</code></pre>"},{"location":"references/data/#class-chattype","title":"class <code>ChatType</code>","text":""},{"location":"references/data/#class-webappchat","title":"class <code>WebAppChat</code>","text":"<p>Represents a Telegram chat. </p> <p>Links:  https://core.telegram.org/bots/webapps#webappchat </p> <p></p>"},{"location":"references/data/#method-__init___1","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    id: int,\n    type: ChatType,\n    title: str,\n    username: Optional[str] = None,\n    photo_url: Optional[str] = None\n) \u2192 None\n</code></pre>"},{"location":"references/data/#class-webappinitdata","title":"class <code>WebAppInitData</code>","text":"<p>Represents the data that the webapp receives from Telegram. </p> <p>Links:  https://core.telegram.org/bots/webapps#webappinitdata </p> <p></p>"},{"location":"references/data/#method-__init___2","title":"method <code>__init__</code>","text":"<pre><code>__init__(\n    query_id: str,\n    auth_date: int,\n    hash: str,\n    signature: str,\n    user: Optional[WebAppUser] = None,\n    receiver: Optional[WebAppUser] = None,\n    chat: Optional[WebAppChat] = None,\n    chat_type: Optional[ChatType] = None,\n    chat_instance: Optional[str] = None,\n    start_param: Optional[str] = None,\n    can_send_after: Optional[int] = None\n) \u2192 None\n</code></pre> <p>This file was automatically generated via lazydocs.</p>"},{"location":"references/errors/","title":"Errors","text":""},{"location":"references/errors/#module-errors","title":"module <code>errors</code>","text":""},{"location":"references/errors/#class-basetwaerror","title":"class <code>BaseTWAError</code>","text":""},{"location":"references/errors/#class-invalidinitdataerror","title":"class <code>InvalidInitDataError</code>","text":""},{"location":"references/errors/#class-expiredinitdataerror","title":"class <code>ExpiredInitDataError</code>","text":"<p>This file was automatically generated via lazydocs.</p>"},{"location":"coverage/","title":"Coverage","text":""}]}